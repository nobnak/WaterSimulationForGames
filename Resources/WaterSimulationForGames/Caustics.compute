#define N_HALF	3
#define N		(2 * N_HALF + 1)

#pragma kernel Scan
#pragma kernel Accumulate


float4 _LightDir;
float4 _Params; // Depth aspect (d/w), Depth aspect (d/h), Refraction, 0

float4 _TexelSize; // du, dv, w, h
SamplerState sampler_Normal;
Texture2D<float4> _Normal;
RWTexture2D<float> _Caustics;

RWTexture2D<float4> _Tmp0;
RWTexture2D<float4> _Tmp1;



[numthreads(8,8,1)]
void Scan (uint3 id : SV_DispatchThreadID) {
	float intensity[N];
	for (int i = 0; i < N; i++) {
		intensity[i] = 0;
	}

	int2 pixelG = id.xy;
	float2 uvG = (pixelG + 0.5) * _TexelSize.xy;
	float2 uvC = uvG - (_Params.xy / abs(_LightDir.z)) * _LightDir.xy;

	for (int x = -N_HALF; x <= N_HALF; x++) {
		float2 uv = uvC + float2(x, 0) * _TexelSize.xy;
		float3 n = _Normal.SampleLevel(sampler_Normal, uv, 0).xyz;
		float3 refrDir = refract(_LightDir.xyz, n, _Params.z);
		float2 uvI = uv + (_Params.xy / abs(refrDir.z)) * refrDir.xy;
		float2 pixelI = uvI * _TexelSize.zw;

		for (int y = 0; y < N; y++) {
			int2 pixel = pixelG + int2(0, y - N_HALF);
			float2 overlap = max(0, 1 - abs(pixel - pixelI));
			intensity[y] += overlap.x * overlap.y;
		}
	}

	_Tmp0[pixelG] = float4(
		intensity[0], 
		intensity[1], 
		intensity[2], 
		intensity[3]);
	_Tmp1[pixelG] = float4(
		intensity[4], 
		intensity[5], 
		intensity[6],
		0);
}

[numthreads(8,8,1)]
void Accumulate (uint3 id : SV_DispatchThreadID) {
	int2 i = id.xy;

	float intensity 
		= _Tmp0[i + int2(0, -3)].r
		+ _Tmp0[i + int2(0, -2)].g
		+ _Tmp0[i + int2(0, -1)].b
		+ _Tmp0[i].a
		+ _Tmp1[i + int2(0, 1)].r
		+ _Tmp1[i + int2(0, 2)].g
		+ _Tmp1[i + int2(0, 3)].b;
	
	_Caustics[i] = intensity;
}
