#pragma kernel Next
#pragma kernel Clamp

#include "Assets/Packages/Gist/CGIncludes/Math.cginc"



int2 _Count;
Texture2D<int> _B;
RWTexture2D<float> _V;
Texture2D<float> _U0;
RWTexture2D<float> _U1;

float4 _Params; // c^2/Dxy^2, Dxy, dt, 0



[numthreads(8, 8, 1)]
void Next(uint3 id : SV_DispatchThreadID) {
	int2 c = id.xy;
	int b = _B[c];
	if (b != 0)
		return;
	float u = _U0[c];
	float v = _V[c];

	int4 ix = clamp(c.xyxy + int4(-1, 0, 1, 0), 0, _Count.xyxy - 1);
	int4 iy = clamp(c.xyxy + int4(0, -1, 0, 1), 0, _Count.xyxy - 1);
	int4 b1 = int4(_B[ix.xy], _B[ix.zw], _B[iy.xy], _B[iy.zw]);
	float4 u1 = float4(_U0[ix.xy], _U0[ix.zw], _U0[iy.xy], _U0[iy.zw]);
	u1 = (b1 == 0) ? u1 : u;
	float uo = dot(u1, 1) - 4 * u;
	float a = _Params.x * uo;

	v += a * _Params.z;
	u += v * _Params.z;

	_V[c] = v;
	_U1[c] = u;
}

[numthreads(8, 8, 1)]
void Clamp(uint3 id : SV_DispatchThreadID) {
	int2 c = id.xy;
	float u = _U0[c];
	float v = _V[c];

	float dl = saturate(_Params.w);
	v = lerp(v, 0, dl);
	u = lerp(u, 0, dl);

	_V[c] = v;
	_U1[c] = u;
}
